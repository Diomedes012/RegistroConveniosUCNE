@page "/crear-convenio"
@inject ConveniosService conveniosService
@inject NavigationManager NavManager 
@using GestionConveniosUCNE.Models
@using Microsoft.AspNetCore.Components.Forms
@using GestionConveniosUCNE.Services
@rendermode InteractiveServer

<div class="pagina-principal">
    <img src="images/image20.png" class="image-5" alt="Fondo" />
    <div class="top-nav-background"></div>
    <div class="rectangle-26"></div>
    <div class="rectangle-27"></div>
    <img src="images/logoUcnePeq.png" class="logo-1" alt="Logo" />

    <div class="bienvenido">BIENVENIDO</div>
    <div class="jrafael">@Usuario</div>

    <div class="barra-navegacion-superior">
        <NavLink href="/pagina-principal" class="nav-button">Inicio</NavLink>
        <NavLink href="/crear-convenio" class="nav-button">Crear convenio</NavLink>
        <NavLink href="/listar-convenio" class="nav-button">Listar convenio</NavLink>
        <NavLink href="/buscar-convenio" class="nav-button">Buscar convenio</NavLink>
    </div>

    <div class="menu-lateral">
        <div class="menu-item">
            <i class="fas fa-user icon"></i> <div class="perfil2">PERFIL</div>
        </div>
        <div class="menu-item">
            <i class="fas fa-file-alt icon"></i> <div class="solicitudes2">SOLICITUDES</div>
        </div>
        <div class="menu-item">
            <i class="fas fa-bell icon"></i> <div class="notificaciones2">NOTIFICACIONES</div>
        </div>
        <div class="menu-item">
            <i class="fas fa-exclamation-triangle icon"></i> <div class="alertas">ALERTAS</div>
        </div>
    </div>

    <button class="rectangle-29" @onclick="CerrarSesion">
        <span class="cerrar-sesi-n">CERRAR SESIÓN</span>
    </button>

    <EditForm Model="@ConvenioEditar" OnValidSubmit="@GuardarConvenio" class="form-container-wrapper">
        <DataAnnotationsValidator />

        <div class="form-container">
            <h3>Registrar Nuevo Convenio</h3>
            <ValidationSummary class="full-width" />

            <div class="form-group">
                <label for="titulo">Título del Convenio:</label>
                <InputText id="titulo" @bind-Value="ConvenioEditar.Titulo" class="form-control" placeholder="Ej. Acuerdo de cooperación académica" />
                <ValidationMessage For="@(() => ConvenioEditar.Titulo)" />
            </div>

            <div class="form-group">
                <label for="tipoConvenio">Tipo de Convenio:</label>
                <InputText id="tipoConvenio" @bind-Value="ConvenioEditar.TipoConvenio" class="form-control" placeholder="Académico, de movilidad, etc." />
                <ValidationMessage For="@(() => ConvenioEditar.TipoConvenio)" />
            </div>

            <div class="form-group">
                <label for="categoria">Categoría:</label>
                <InputText id="categoria" @bind-Value="ConvenioEditar.Categoria" class="form-control" placeholder="Convenio, Contrato, MOU..." />
                <ValidationMessage For="@(() => ConvenioEditar.Categoria)" />
            </div>

            <div class="form-group">
                <label for="fechaFirma">Fecha de Firma:</label>
                <InputDate id="fechaFirma" @bind-Value="ConvenioEditar.FechaFirma" class="form-control" />
                <ValidationMessage For="@(() => ConvenioEditar.FechaFirma)" />
            </div>

            <div class="form-group">
                <label for="fechaVencimiento">Fecha de Vencimiento:</label>
                <InputDate id="fechaVencimiento" @bind-Value="ConvenioEditar.FechaVencimiento" class="form-control" />
            </div>

            <div class="form-group">
                <label for="duracionMeses">Duración (meses):</label>
                <InputNumber id="duracionMeses" @bind-Value="ConvenioEditar.DuracionMeses" class="form-control" />
            </div>

            <div class="form-group">
                <label for="estado">Estado:</label>
                <InputSelect id="estado" @bind-Value="ConvenioEditar.Estado" class="form-control">
                    <option value="Activo">Activo</option>
                    <option value="Vencido">Vencido</option>
                    <option value="En Renovación">En Renovación</option>
                </InputSelect>
                <ValidationMessage For="@(() => ConvenioEditar.Estado)" />
            </div>

            <div class="form-group">
                <label for="archivo">Archivo del Convenio (PDF, opcional):</label>
                <InputFile id="archivo" OnChange="OnFileSelected" class="form-control" />
            </div>

            <div class="form-group full-width">
                <label for="descripcionObjetivos">Descripción y Objetivos:</label>
                <InputTextArea id="descripcionObjetivos" @bind-Value="ConvenioEditar.DescripcionObjetivos" class="form-control textarea-large" />
                <ValidationMessage For="@(() => ConvenioEditar.DescripcionObjetivos)" />
            </div>

            <div class="form-actions full-width">
                <button type="submit" class="btn btn-primary">Guardar Convenio</button>
            </div>

        </div>
    </EditForm>
</div>
@code {
    private IBrowserFile? archivo;

    // --- Lógica del Layout ---
    private string Usuario = "JRAFAEL";

    private void CerrarSesion()
    {
        Console.WriteLine("Sesión cerrada");
        // NavManager.NavigateTo("/login"); 
    }

    // --- Lógica del Formulario ---
    private Convenio ConvenioEditar = new()
    {
        FechaFirma = DateTime.Now, // Pre-rellena la fecha de firma
        Estado = "Activo" // Pre-selecciona "Activo"
    };


    private async Task GuardarConvenio()
    {
        try
        {
            if (archivo != null)
            {
                var filePath = Path.Combine("wwwroot", "uploads", archivo.Name);
                
                // Crea el directorio si no existe
                var directoryPath = Path.GetDirectoryName(filePath);
                if (directoryPath != null && !Directory.Exists(directoryPath))
                {
                    Directory.CreateDirectory(directoryPath);
                }

                await using var stream = File.Create(filePath);
                await archivo.OpenReadStream(10 * 1024 * 1024).CopyToAsync(stream);

                ConvenioEditar.ArchivoPrincipal = $"/uploads/{archivo.Name}";
            }

            ConvenioEditar.UltimaModificacion = DateTime.Now;

            var resultado = await conveniosService.Guardar(ConvenioEditar);

            if (resultado)
            {
                ConvenioEditar = new Convenio() { FechaFirma = DateTime.Now, Estado = "Activo" };
                archivo = null;
                // Aquí se podria añadir una notificación de "Éxito"
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error: {ex.Message}");
            // Aquí deberías mostrar un mensaje de error al usuario
        }
    }

    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        archivo = e.File;
        Console.WriteLine($"Archivo seleccionado: {archivo?.Name ?? "ninguno"}");
    }
}
